'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Make a bag of string constants, kind of like a Java enum.
 * e.g. var MyKind = new Enum('TEXT PERSON');
 * gives you MyKind.TEXT == 'TEXT', MyKind.PERSON == 'PERSON'
 *
 * Also, each of the constants has an isCONSTANT() function added, so you can write:
 * MyKind.isTEXT(myvar) -- which has the advantage that it will create a noisy error if
 * if myvar is invalid (e.g. it helps catch typos). isCONSTANT() allows falsy values, but an unrecognised
 * non-false value indicates an error.
 *
 * MyKind.values holds the full list (and is frozen to keep it safe from edits).
 *
 * MyKind.has(thing) provides a test, true if thing is a valid value.
 * 
 * Use-case: It's safer than just using strings for constants, especially around refactoring.
 * It does use strings, because you want to work with json.
 *
 * @author Daniel
 * Ref: http://stijndewitt.wordpress.com/2014/01/26/enums-in-javascript/
 */
var Enum = function () {

	/** @param values {string|string[]}
 */
	function Enum(values) {
		var _this = this;

		_classCallCheck(this, Enum);

		// Set the values array
		if (typeof values === 'string') {
			this.values = values.split(' ');
		} else {
			this.values = values;
		}

		var _loop = function _loop(i) {
			var k = _this.values[i];
			_this[k] = k;
			/** isCONSTANT: {string} -> {boolean} */
			_this['is' + k] = function (v) {
				if (!v) return false;
				if (!this.enumerator[v]) throw new Error('Invalid Enum value: ' + v);
				return v === this.k;
			}.bind({ enumerator: _this, k: k });
			/** $CONSTANT: {string} -> {string} safety accessor */
			_this['$' + k] = function () {
				return k;
			};
		};

		for (var i = 0; i < this.values.length; i++) {
			_loop(i);
		}
		// Prevent edits
		if (Object.freeze) {
			Object.freeze(this);
			Object.freeze(this.values);
		}
	}

	/**
  * @param s {string}
  * @returns true if s is a value of this enum, false otherwise.
  */


	_createClass(Enum, [{
		key: 'has',
		value: function has(s) {
			return this.values.indexOf(s) != -1;
		}

		/**
   * @param s {String}
   * @throws Error if s is not a value of this enum.
   * @returns s (so this can be used as a safety-check in chained method calls)
   */

	}, {
		key: 'assert',
		value: function assert(s) {
			if (this.has(s)) return s;
			throw new Error("Invalid enum: " + s + " is not in " + this.values);
		}
	}]);

	return Enum;
}();

exports.default = Enum;