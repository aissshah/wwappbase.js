
import {assert, assMatch} from 'sjtest';
import {asNum} from 'wwutils';
import DataClass from './DataClass';
import C from '../CBase';

/** impact utils */
class Claim extends DataClass {
	/**
	 * @type {!String}
	 */
	k;
	v;
	/** @type {TimeString} */
	t;
	/** @type {XIdString[]} */
	f;
	/** @type {String[]} */
	c;

	/** Puts data into the "Claim" format that Profiler can understand 
	 *  NB: if Claim is generated by user input (entering a value in to PropControl field)
	 * 	then 'from' should contain 'myloop@app' 
	 * @param {String} key
	 * @param {String[]|boolean} c - e.g. ['public']
	 * @param {String[]|boolean} consent - Same as c!
	*/
	constructor({key, value, from, c, consent}) {
		c = c || consent;
		// convert a single XId to an array?
		if (_.isString(from)) from = [from];	

		assMatch(from, 'String[]');
		assMatch(key, String); 

		// Converting from internally held true/false to something
		// That the back-end can understand
		if ( typeof c === 'boolean' ) c = c ? ['public'] : ['private']
		assMatch(c, 'String[]');

		return {
			c,
			t: new Date().toISOString(),
			v: value,
			f: from,
			k: key
		};
		// NB: kv, o are backend fields made by the backend for internal (ES) use
	};
} // ./Claim
DataClass.register(Claim);
const This = Claim;
export default Claim;


/**
 * ??dubious use cases
 */
Claim.getClaims = person => {
	if ( ! person ) return {};
	Person.assIsa(person, "Profiler.js getClaims");
	const claims = person.claims;
	return claims || {};
};

